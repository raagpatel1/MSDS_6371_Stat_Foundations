AllData$OverallQual = as.numeric(factor(AllData$OverallQual))
AllData$RoofStyle = as.numeric(factor(AllData$RoofStyle))
AllData$RoofMatl = as.numeric(factor(AllData$RoofMatl))
AllData$Exterior1st = as.numeric(factor(AllData$Exterior1st))
AllData$Exterior2nd = as.numeric(factor(AllData$Exterior2nd))
AllData$MasVnrType = as.numeric(factor(AllData$MasVnrType))
AllData$ExterQual = as.numeric(factor(AllData$ExterQual))
AllData$ExterCond = as.numeric(factor(AllData$ExterCond))
AllData$Foundation = as.numeric(factor(AllData$Foundation))
AllData$BsmtQual = as.numeric(factor(AllData$BsmtQual))
AllData$BsmtCond = as.numeric(factor(AllData$BsmtCond))
AllData$BsmtExposure = as.numeric(factor(AllData$BsmtExposure))
AllData$BsmtFinType1 = as.numeric(factor(AllData$BsmtFinType1))
AllData$BsmtFinType2 = as.numeric(factor(AllData$BsmtFinType2))
AllData$Heating = as.numeric(factor(AllData$Heating))
AllData$HeatingQC = as.numeric(factor(AllData$HeatingQC))
AllData$CentralAir = as.numeric(factor(AllData$CentralAir))
AllData$Electrical = as.numeric(factor(AllData$Electrical))
AllData$KitchenQual = as.numeric(factor(AllData$KitchenQual))
AllData$TotRmsAbvGrd = as.numeric(factor(AllData$TotRmsAbvGrd))
AllData$Functional = as.numeric(factor(AllData$Functional))
AllData$FireplaceQu = as.numeric(factor(AllData$FireplaceQu))
AllData$GarageType = as.numeric(factor(AllData$GarageType))
AllData$GarageFinish = as.numeric(factor(AllData$GarageFinish))
AllData$GarageQual = as.numeric(factor(AllData$GarageQual))
AllData$GarageCond = as.numeric(factor(AllData$GarageCond))
AllData$PavedDrive = as.numeric(factor(AllData$PavedDrive))
AllData$PoolQC = as.numeric(factor(AllData$PoolQC))
AllData$Fence = as.numeric(factor(AllData$Fence))
AllData$SaleType = as.numeric(factor(AllData$SaleType))
AllData$MiscFeature = as.numeric(factor(AllData$MiscFeature))
AllData$SaleCondition = as.numeric(factor(AllData$SaleCondition))
sapply(AllData, class)
summary(AllData)
AllData$MSZoning = as.numeric(factor(AllData$MSZoning))
AllData$Street = as.numeric(factor(AllData$Street))
AllData$Alley = as.numeric(factor(AllData$Alley))
AllData$LotShape = as.numeric(factor(AllData$LotShape))
AllData$LandContour = as.numeric(factor(AllData$LandContour))
AllData$Utilities = as.numeric(factor(AllData$Utilities))
AllData$LotConfig = as.numeric(factor(AllData$LotConfig))
AllData$LandSlope = as.numeric(factor(AllData$LandSlope))
AllData$Neighborhood = as.numeric(factor(AllData$Neighborhood))
AllData$Condition1 = as.numeric(factor(AllData$Condition1))
AllData$Condition2 = as.numeric(factor(AllData$Condition2))
AllData$BldgType = as.numeric(factor(AllData$BldgType))
AllData$HouseStyle = as.numeric(factor(AllData$HouseStyle))
AllData$OverallQual = as.numeric(factor(AllData$OverallQual))
AllData$YearBuilt = as.numeric(as.factor(AllData$YearBuilt))
AllData$YearRemodAdd = as.numeric(as.factor(AllData$YearRemodAdd))
AllData$RoofStyle = as.numeric(factor(AllData$RoofStyle))
AllData$RoofMatl = as.numeric(factor(AllData$RoofMatl))
AllData$Exterior1st = as.numeric(factor(AllData$Exterior1st))
AllData$Exterior2nd = as.numeric(factor(AllData$Exterior2nd))
AllData$MasVnrType = as.numeric(factor(AllData$MasVnrType))
AllData$ExterQual = as.numeric(factor(AllData$ExterQual))
AllData$ExterCond = as.numeric(factor(AllData$ExterCond))
AllData$Foundation = as.numeric(factor(AllData$Foundation))
AllData$BsmtQual = as.numeric(factor(AllData$BsmtQual))
AllData$BsmtCond = as.numeric(factor(AllData$BsmtCond))
AllData$BsmtExposure = as.numeric(factor(AllData$BsmtExposure))
AllData$BsmtFinType1 = as.numeric(factor(AllData$BsmtFinType1))
AllData$BsmtFinType2 = as.numeric(factor(AllData$BsmtFinType2))
AllData$Heating = as.numeric(factor(AllData$Heating))
AllData$HeatingQC = as.numeric(factor(AllData$HeatingQC))
AllData$CentralAir = as.numeric(factor(AllData$CentralAir))
AllData$Electrical = as.numeric(factor(AllData$Electrical))
AllData$KitchenQual = as.numeric(factor(AllData$KitchenQual))
AllData$TotRmsAbvGrd = as.numeric(factor(AllData$TotRmsAbvGrd))
AllData$Functional = as.numeric(factor(AllData$Functional))
AllData$FireplaceQu = as.numeric(factor(AllData$FireplaceQu))
AllData$GarageType = as.numeric(factor(AllData$GarageType))
AllData$GarageYrBlt = as.numeric(as.factor(AllData$GarageYrBlt))
AllData$GarageFinish = as.numeric(factor(AllData$GarageFinish))
AllData$GarageQual = as.numeric(factor(AllData$GarageQual))
AllData$GarageCond = as.numeric(factor(AllData$GarageCond))
AllData$PavedDrive = as.numeric(factor(AllData$PavedDrive))
AllData$PoolQC = as.numeric(factor(AllData$PoolQC))
AllData$Fence = as.numeric(factor(AllData$Fence))
AllData$SaleType = as.numeric(factor(AllData$SaleType))
AllData$YrSold = as.numeric(as.factor(AllData$YrSold))
AllData$MiscFeature = as.numeric(factor(AllData$MiscFeature))
AllData$SaleCondition = as.numeric(factor(AllData$SaleCondition))
sapply(AllData, class)
# Instead of deleting NA values, as we did before, we will throw 0's in for the
# categorical variables. Mainly looking at data with a lot of NA's.
summary(AllData)
AllData$Alley[which(is.na(AllData$Alley))] = 0
AllData$PoolQC[which(is.na(AllData$PoolQC))] = 0
AllData$Fence[which(is.na(AllData$Fence))] = 0
AllData$MiscFeature[which(is.na(AllData$MiscFeature))] = 0
AllData$FireplaceQu[which(is.na(AllData$FireplaceQu))] = 0
AllData$LotFrontage[which(is.na(AllData$LotFrontage))] = 0
AllData$GarageType[which(is.na(AllData$GarageType))] = 0
AllData$GarageFinish[which(is.na(AllData$GarageFinish))] = 0
AllData$GarageQual[which(is.na(AllData$GarageQual))] = 0
AllData$GarageCond[which(is.na(AllData$GarageCond))] = 0
AllData$GarageYrBlt[which(is.na(AllData$GarageYrBlt))] = 0
AllData$BsmtFinType2[which(is.na(AllData$BsmtFinType2))] = 0
AllData$BsmtFinType1[which(is.na(AllData$BsmtFinType1))] = 0
AllData$BsmtExposure[which(is.na(AllData$BsmtExposure))] = 0
AllData$BsmtCond[which(is.na(AllData$BsmtCond))] = 0
AllData$BsmtFullBath[which(is.na(AllData$BsmtFullBath))] = 0
AllData$BsmtQual[which(is.na(AllData$BsmtQual))] = 0
AllData$MasVnrType[which(is.na(AllData$MasVnrType))] = 0
AllData$MasVnrArea[which(is.na(AllData$MasVnrArea))] = 0
summary(AllData)
qqnorm(AllData$SalePrice)
qqline(AllData$SalePrice)
qqnorm(log(AllData$SalePrice$SalePrice))
qqnorm(log(AllData$SalePrice))
qqline(log(AllData$SalePrice))
FinalTestData = AllData[1459:2919,1:80]
FinalTestData = AllData[1461:2919,1:80]
FinalTrainData = AllData[1:1460,1:81]
InitialModel = lm(SalePrice ~  ., data = FinalTrainData)
summary(InitialModel)
ols_step_both_p(InitialModel, prem = 0.01, pent = 0.05, details = F, progress = T)
AllData$SalePrice = log(AllData$SalePrice)
FullData = read.csv("Data/train.csv", na.strings = "NA", strip.white = T)
Submission_TestData  = read.csv("Data/test.csv", na.strings = "NA", strip.white = T)
Submission_TestData$SalePrice = NA
AllData = rbind(FullData,Submission_TestData)
# Starting over, as you can see. Let's just start from the beginning using all
# of the original data.
# Combining the data so that we can easily modify the columns, and can easily
# split it up earlier.
str(AllData)
# We also know to make SalePrice log transformed to adress normality.
qqnorm(AllData$SalePrice)
qqline(AllData$SalePrice)
qqnorm(log(AllData$SalePrice))
qqline(log(AllData$SalePrice))
AllData$SalePrice = log(AllData$SalePrice)
# c = c(3,6:8)
# c
# AllData[,c] = as.factor(AllData[,c])
#
# AllData[,c(3,6:18)] = as.factor(AllData[,c(3,6:18)])
#
# Warning message:
#   In xtfrm.data.frame(x) : cannot xtfrm data frames
# Will need to change the columns to numeric/categorical. We tried
# somehow automating it, but to no avail. By hand we go;
AllData$MSZoning = as.numeric(factor(AllData$MSZoning))
AllData$Street = as.numeric(factor(AllData$Street))
AllData$Alley = as.numeric(factor(AllData$Alley))
AllData$LotShape = as.numeric(factor(AllData$LotShape))
AllData$LandContour = as.numeric(factor(AllData$LandContour))
AllData$Utilities = as.numeric(factor(AllData$Utilities))
AllData$LotConfig = as.numeric(factor(AllData$LotConfig))
AllData$LandSlope = as.numeric(factor(AllData$LandSlope))
AllData$Neighborhood = as.numeric(factor(AllData$Neighborhood))
AllData$Condition1 = as.numeric(factor(AllData$Condition1))
AllData$Condition2 = as.numeric(factor(AllData$Condition2))
AllData$BldgType = as.numeric(factor(AllData$BldgType))
AllData$HouseStyle = as.numeric(factor(AllData$HouseStyle))
AllData$OverallQual = as.numeric(factor(AllData$OverallQual))
AllData$OverallCond = as.numeric(factor(AllData$OverallCond))
AllData$YearBuilt = as.numeric(as.factor(AllData$YearBuilt))
AllData$YearRemodAdd = as.numeric(as.factor(AllData$YearRemodAdd))
AllData$RoofStyle = as.numeric(factor(AllData$RoofStyle))
AllData$RoofMatl = as.numeric(factor(AllData$RoofMatl))
AllData$Exterior1st = as.numeric(factor(AllData$Exterior1st))
AllData$Exterior2nd = as.numeric(factor(AllData$Exterior2nd))
AllData$MasVnrType = as.numeric(factor(AllData$MasVnrType))
AllData$ExterQual = as.numeric(factor(AllData$ExterQual))
AllData$ExterCond = as.numeric(factor(AllData$ExterCond))
AllData$Foundation = as.numeric(factor(AllData$Foundation))
AllData$BsmtQual = as.numeric(factor(AllData$BsmtQual))
AllData$BsmtCond = as.numeric(factor(AllData$BsmtCond))
AllData$BsmtExposure = as.numeric(factor(AllData$BsmtExposure))
AllData$BsmtFinType1 = as.numeric(factor(AllData$BsmtFinType1))
AllData$BsmtFinType2 = as.numeric(factor(AllData$BsmtFinType2))
AllData$Heating = as.numeric(factor(AllData$Heating))
AllData$HeatingQC = as.numeric(factor(AllData$HeatingQC))
AllData$CentralAir = as.numeric(factor(AllData$CentralAir))
AllData$Electrical = as.numeric(factor(AllData$Electrical))
AllData$KitchenQual = as.numeric(factor(AllData$KitchenQual))
AllData$TotRmsAbvGrd = as.numeric(factor(AllData$TotRmsAbvGrd))
AllData$Functional = as.numeric(factor(AllData$Functional))
AllData$FireplaceQu = as.numeric(factor(AllData$FireplaceQu))
AllData$GarageType = as.numeric(factor(AllData$GarageType))
AllData$GarageYrBlt = as.numeric(as.factor(AllData$GarageYrBlt))
AllData$GarageFinish = as.numeric(factor(AllData$GarageFinish))
AllData$GarageQual = as.numeric(factor(AllData$GarageQual))
AllData$GarageCond = as.numeric(factor(AllData$GarageCond))
AllData$PavedDrive = as.numeric(factor(AllData$PavedDrive))
AllData$PoolQC = as.numeric(factor(AllData$PoolQC))
AllData$Fence = as.numeric(factor(AllData$Fence))
AllData$SaleType = as.numeric(factor(AllData$SaleType))
AllData$YrSold = as.numeric(as.factor(AllData$YrSold))
AllData$MiscFeature = as.numeric(factor(AllData$MiscFeature))
AllData$SaleCondition = as.numeric(factor(AllData$SaleCondition))
sapply(AllData, class)
# Instead of deleting NA values, as we did before, we will throw 0's in for the
# categorical variables. Mainly looking at data with a lot of NA's.
summary(AllData)
AllData$Alley[which(is.na(AllData$Alley))] = 0
AllData$PoolQC[which(is.na(AllData$PoolQC))] = 0
AllData$Fence[which(is.na(AllData$Fence))] = 0
AllData$MiscFeature[which(is.na(AllData$MiscFeature))] = 0
AllData$FireplaceQu[which(is.na(AllData$FireplaceQu))] = 0
AllData$LotFrontage[which(is.na(AllData$LotFrontage))] = 0
AllData$GarageType[which(is.na(AllData$GarageType))] = 0
AllData$GarageFinish[which(is.na(AllData$GarageFinish))] = 0
AllData$GarageQual[which(is.na(AllData$GarageQual))] = 0
AllData$GarageCond[which(is.na(AllData$GarageCond))] = 0
AllData$GarageYrBlt[which(is.na(AllData$GarageYrBlt))] = 0
AllData$BsmtFinType2[which(is.na(AllData$BsmtFinType2))] = 0
AllData$BsmtFinType1[which(is.na(AllData$BsmtFinType1))] = 0
AllData$BsmtExposure[which(is.na(AllData$BsmtExposure))] = 0
AllData$BsmtCond[which(is.na(AllData$BsmtCond))] = 0
AllData$BsmtFullBath[which(is.na(AllData$BsmtFullBath))] = 0
AllData$BsmtQual[which(is.na(AllData$BsmtQual))] = 0
AllData$MasVnrType[which(is.na(AllData$MasVnrType))] = 0
AllData$MasVnrArea[which(is.na(AllData$MasVnrArea))] = 0
summary(AllData)
# Unsure what to do about the SalePrice NA's, we have seen methods of using the
# mean, but that is hard with all the categorical variable differences. We are
# also trying not to delete any data, as that has screwed us in our first
# attempt of this problem.
# Time to split the data up.
FinalTestData = AllData[1461:2919,1:80]
FinalTrainData = AllData[1:1460,1:81]
# Let's create a model with everything in it, then use olss stepwise to
# fix it.
InitialModel = lm(SalePrice ~  ., data = FinalTrainData)
summary(InitialModel)
# Residual standard error: 29740 on 1380 degrees of freedom
# (1 observation deleted due to missingness)
# Multiple R-squared:  0.8674,	Adjusted R-squared:  0.8599
# F-statistic: 115.8 on 78 and 1380 DF,  p-value: < 2.2e-16
# High AdjR^2, probably bc of the overfitting. Though we are surprised that
# the AdjR^2 is not lower with these many variables in the model.
ols_step_both_p(InitialModel, prem = 0.01, pent = 0.05, details = F, progress = T)
# Final Model Output
# ------------------
#
#   Model Summary
# ---------------------------------------------------------------------
#   R                     0.929       RMSE                   29754.724
# R-Squared               0.863       Coef. Var                 16.446
# Adj. R-Squared          0.860       MSE                885343576.300
# Pred R-Squared          0.807       MAE                    18261.862
# ---------------------------------------------------------------------
#   RMSE: Root Mean Square Error
# MSE: Mean Square Error
# MAE: Mean Absolute Error
StepwiseModel = ols_step_both_p(CustomModel, prem = 0.01, pent = 0.02, details = F, progress = T)
CustomModel = lm(SalePrice ~  ., data = FinalTrainData)
summary(CustomModel)
StepwiseModel = ols_step_both_p(CustomModel, prem = 0.01, pent = 0.02, details = F, progress = T)
summary(StepwiseModel)
StepwiseModel$model
StepwiseModel$mallows_cp
install.packages("forecast")
library(forecast)
CV(StepwiseModel)
class(StepwiseModel)
class(StepwiseModel$model)
CV(StepwiseModel$model)
StepwiseModel = StepwiseModel$model
summary(StepwiseModel)
CV(StepwiseModel)
BackwardsModel = ols_step_backward_p(fit, prem = 0.01, details = F, progress = T)
summary(BackwardsModel)
BackwardsModel = BackwardsModel$model
summary(BackwardsModel)
CV(BackwardsModel)
ForwardModel = ols_step_forward_p(fit, penter = 0.01, details = F, progress = T)
ForwardModel = ForwardModel$model
summary(ForwardModel)
CV(ForwardModel)
CV(CustomModel)
StepwisePredicted = predict(StepwiseModel, FinalTestData)
StepwisePredicted = e^(StepwisePredicted)
StepwisePredicted = exp(StepwisePredicted)
StepwisePredicted = rbind(FinalTestData$Id,StepwisePredicted)
View(StepwisePredicted)
StepwisePredicted = cbind(FinalTestData$Id,StepwisePredicted)
StepwisePredicted = predict(StepwiseModel, FinalTestData)
StepwisePredicted = exp(StepwisePredicted)
StepwisePredicted = cbind(FinalTestData$Id,StepwisePredicted)
View(StepwisePredicted)
StepwisePredicted = predict(StepwiseModel, FinalTestData)
StepwisePredicted = exp(StepwisePredicted)
StepwisePredicted = cbind(FinalTestData$Id,StepwisePredicted)
names(StepwisePredicted)[1] = "Id"
names(StepwisePredicted)[1] = "SalePrice"
head(StepwisePredicted)
StepwisePredicted = predict(StepwiseModel, FinalTestData)
StepwisePredicted = exp(StepwisePredicted)
StepwisePredicted = cbind(FinalTestData$Id,StepwisePredicted)
names(StepwisePredicted)[1] = "Id"
names(StepwisePredicted)[2] = "SalePrice"
head(StepwisePredicted)
StepwisePredicted = predict(StepwiseModel, FinalTestData)
StepwisePredicted = exp(StepwisePredicted)
head(StepwisePredicted)
names(StepwisePredicted)[1] = "Id"
names(StepwisePredicted)[2] = "SalePrice"
head(StepwisePredicted)
Predict_Stepwise = predict(StepwiseModel, FinalTestData)
Predict_Stepwise = exp(Predict_Stepwise)
StepwisePredicted = cbind(FinalTestData$Id,Predict_Stepwise)
names(StepwisePredicted)[1] = "Id"
names(StepwisePredicted)[2] = "SalePrice"
head(StepwisePredicted)
Predict_Stepwise = predict(StepwiseModel, FinalTestData)
Predict_Stepwise = exp(Predict_Stepwise)
head(Predict_Stepwise)
class(Predict_Stepwise)
Predict_Stepwise = as.vector(Predict_Stepwise)
class(Predict_Stepwise)
Predict_Stepwise = as.data.frame(Predict_Stepwise)
StepwisePredicted = cbind(FinalTestData$Id,Predict_Stepwise)
names(StepwisePredicted)[1] = "Id"
names(StepwisePredicted)[2] = "SalePrice"
head(StepwisePredicted)
write.csv (StepwisePredicted, "/SubmissionData/StepwisePredicted.csv", row.names =FALSE)
write.csv(StepwisePredicted, "/SubmissionData/StepwisePredicted.csv", row.names =FALSE)
write.csv(StepwisePredicted, "SubmissionData/StepwisePredicted.csv", row.names =FALSE)
summary(FinalTrainData$SalePrice)
sum(is.na(FinalTrainData$SalePrice))
sum(is.na(AllData$SalePrice))
sum(is.na(StepwisePredicted))
summary(StepwisePredicted)
avg(StepwisePredicted$SalePrice)
average(StepwisePredicted$SalePrice)
mean(StepwisePredicted$SalePrice)
Predict_Stepwise = predict(StepwiseModel, FinalTestData)
Predict_Stepwise = exp(Predict_Stepwise)
Predict_Stepwise = as.data.frame(Predict_Stepwise)
StepwisePredicted = cbind(FinalTestData$Id,Predict_Stepwise)
names(StepwisePredicted)[1] = "Id"
names(StepwisePredicted)[2] = "SalePrice"
summary(StepwisePredicted)
# There are 8 NA's, no idea how or why they are there. We will replace them with
# the average, since that will have a negligible impact on the data.
StepwisePredicted$SalePrice[which(is.na(StepwisePredicted$SalePrice))] = 178591
write.csv(StepwisePredicted, "SubmissionData/StepwisePredicted.csv", row.names =FALSE)
# There are 8 NA's, no idea how or why they are there. We will replace them with
# the average, since that will have a negligible impact on the data.
summary(StepwisePredicted)
Predict_Forward = predict(ForwardModel, FinalTestData)
ForwardModel = ols_step_forward_p(fit, penter = 0.01, details = F, progress = T)
ForwardModel = ForwardModel$model
summary(ForwardModel)
Predict_Forward = predict(ForwardModel, FinalTestData)
ForwardModel
ForwardModel = ols_step_forward_p(fit, penter = 0.01, details = F, progress = T)
ForwardModel = ForwardModel$model
class(ForwardModel)
Predict_Forward = predict(ForwardModel, FinalTestData)
BackwardsModel = ols_step_backward_p(CustomModel, prem = 0.01, details = F, progress = T)
summary(BackwardsModel)
BackwardsModel = BackwardsModel$model
summary(BackwardsModel)
# Residual standard error: 7.702 on 198 degrees of freedom
# Multiple R-squared:  0.3978,	Adjusted R-squared:  0.3948
# F-statistic: 130.8 on 1 and 198 DF,  p-value: < 2.2e-16
CV(BackwardsModel)
#       CV        AIC       AICc        BIC      AdjR2
# 59.920338 820.606174 820.728623 830.501126   0.394783
ForwardModel = ols_step_forward_p(CustomModel, penter = 0.01, details = F, progress = T)
ForwardModel = ForwardModel$model
summary(ForwardModel)
# Residual standard error: 7.702 on 198 degrees of freedom
# Multiple R-squared:  0.3978,	Adjusted R-squared:  0.3948
# F-statistic: 130.8 on 1 and 198 DF,  p-value: < 2.2e-16
CV(ForwardModel)
#     CV        AIC       AICc        BIC      AdjR2
# 59.920338 820.606174 820.728623 830.501126   0.394783
BackwardsModel = BackwardsModel$model
summary(BackwardsModel)
# Residual standard error: 7.702 on 198 degrees of freedom
# Multiple R-squared:  0.3978,	Adjusted R-squared:  0.3948
# F-statistic: 130.8 on 1 and 198 DF,  p-value: < 2.2e-16
CV(BackwardsModel)
BackwardsModel = BackwardsModel$model
summary(BackwardsModel)
BackwardsModel = ols_step_backward_p(CustomModel, prem = 0.01, details = F, progress = T)
BackwardsModel = BackwardsModel$model
summary(BackwardsModel)
# Residual standard error: 7.702 on 198 degrees of freedom
# Multiple R-squared:  0.3978,	Adjusted R-squared:  0.3948
# F-statistic: 130.8 on 1 and 198 DF,  p-value: < 2.2e-16
CV(BackwardsModel)
ForwardModel = ForwardModel$model
summary(ForwardModel)
# Residual standard error: 7.702 on 198 degrees of freedom
# Multiple R-squared:  0.3978,	Adjusted R-squared:  0.3948
# F-statistic: 130.8 on 1 and 198 DF,  p-value: < 2.2e-16
CV(ForwardModel)
ForwardModel = ols_step_forward_p(CustomModel, penter = 0.01, details = F, progress = T)
ForwardModel = ForwardModel$model
summary(ForwardModel)
# Residual standard error: 7.702 on 198 degrees of freedom
# Multiple R-squared:  0.3978,	Adjusted R-squared:  0.3948
# F-statistic: 130.8 on 1 and 198 DF,  p-value: < 2.2e-16
CV(ForwardModel)
Predict_Forward = predict(ForwardModel, FinalTestData)
Predict_Forward = exp(Predict_Forward)
Predict_Forward = as.data.frame(Predict_Forward)
ForwardPredicted = cbind(FinalTestData$Id,Predict_Forward)
names(ForwardPredicted)[1] = "Id"
names(ForwardPredicted)[2] = "SalePrice"
summary(ForwardPredicted)
Predict_Forward = predict(ForwardModel, FinalTestData)
Predict_Forward = exp(Predict_Forward)
Predict_Forward = as.data.frame(Predict_Forward)
ForwardPredicted = cbind(FinalTestData$Id,Predict_Forward)
names(ForwardPredicted)[1] = "Id"
names(ForwardPredicted)[2] = "SalePrice"
summary(ForwardPredicted)
# There are 8 NA's, again, which means it is somewhere in our data.
ForwardPredicted$SalePrice[which(is.na(ForwardPredicted$SalePrice))] = 178591
summary(ForwardPredicted)
write.csv(ForwardPredicted, "SubmissionData/ForwardPredicted", row.names =FALSE)
write.csv(ForwardPredicted, "SubmissionData/ForwardPredicted.csv", row.names =FALSE)
View(Predict_Forward)
Predict_Backwards = predict(BackwardsModel, FinalTestData)
Predict_Backwards = exp(Predict_Backwards)
Predict_Backwards = as.data.frame(Predict_Backwards)
BackwardPredicted = cbind(FinalTestData$Id,Predict_Backwards)
names(BackwardPredicted)[1] = "Id"
names(BackwardPredicted)[2] = "SalePrice"
summary(BackwardPredicted)
Predict_Backwards = predict(BackwardsModel, FinalTestData)
Predict_Backwards = exp(Predict_Backwards)
Predict_Backwards = as.data.frame(Predict_Backwards)
BackwardPredicted = cbind(FinalTestData$Id,Predict_Backwards)
names(BackwardPredicted)[1] = "Id"
names(BackwardPredicted)[2] = "SalePrice"
summary(BackwardPredicted)
# There are 8 NA's, again, which means it is somewhere in our data. This time, the
# mean is different.
BackwardPredicted$SalePrice[which(is.na(BackwardPredicted$SalePrice))] = 178936
summary(BackwardPredicted)
write.csv(BackwardPredicted, "SubmissionData/BackwardPredicted.csv", row.names =FALSE)
summary(CustomModel)
CustomModel = lm(SalePrice ~ . -SaleCondition,-SaleType, data = FinalTrainData)
summary(CustomModel)
CustomModel = lm(SalePrice ~ . -c(SaleCondition,-SaleType), data = FinalTrainData)
CustomModel = lm(SalePrice ~ . -c(SaleCondition,SaleType), data = FinalTrainData)
CustomModel = aov(SalePrice ~ ., Data = FinalTrainData)
CustomModel = lm(SalePrice ~ ., Data = FinalTrainData)
CustomModel = lm(SalePrice ~ ., data = FinalTrainData)
summary(CustomModel)
CustomModel = aov(SalePrice ~ ., data = FinalTrainData)
summary(CustomModel)
CustomModel = lm(SalePrice ~ MSSubClass+MSZoning+LotFrontage+LotArea+Street+
Alley+LotShape+LandContour+LandSlope+Neighborhood+Condition1+
BldgType+HouseStyle+OverallQual+YearBuilt+YearRemodAdd+RoofStyle+
RoofMatl+MasVnrArea+ExterQual+BsmtCond+BsmtFinType1+BsmtFinSF1+
BsmtFinSF2+BsmtUnfSF+HeatingQC+CentralAir+X1stFlrSF+X2ndFlrSF+
BsmtFullBath+HalfBath+KitchenQual+TotRmsAbvGrd+Functional+Fireplaces+
GarageYrBlt+GarageCars+ScreenPorch+PoolQC+SaleCondition, data = FinalTrainData)
summary(CustomModel)
CustomModel = lm(SalePrice ~ MSZoning+LotFrontage+LotArea+Street+
Alley+LotShape+LandContour+LandSlope+
BldgType+HouseStyle+OverallQual+YearBuilt+YearRemodAdd+RoofStyle+
RoofMatl+BsmtCond+BsmtFinType1+BsmtFinSF1+
BsmtFinSF2+HeatingQC+CentralAir+X1stFlrSF+X2ndFlrSF+
BsmtFullBath+KitchenQual+TotRmsAbvGrd+Functional+Fireplaces+
GarageCars+ScreenPorch+PoolQC+SaleCondition, data = FinalTrainData)
summary(CustomModel)
CustomModel = lm(SalePrice ~ MSZoning+LotArea+Street+
LotShape+LandSlope+
BldgType+HouseStyle+OverallQual+YearBuilt+YearRemodAdd+
RoofMatl+BsmtCond+BsmtFinType1+BsmtFinSF1+
BsmtFinSF2+HeatingQC+CentralAir+X1stFlrSF+X2ndFlrSF+
BsmtFullBath+KitchenQual+TotRmsAbvGrd+Functional+Fireplaces+
GarageCars+ScreenPorch+PoolQC+SaleCondition, data = FinalTrainData)
summary(CustomModel)
CustomModel = lm(SalePrice ~ MSZoning+LotArea+Street+
LotShape+LandSlope+
BldgType+OverallQual+YearBuilt+YearRemodAdd+
RoofMatl+BsmtCond+BsmtFinType1+BsmtFinSF1+
BsmtFinSF2+HeatingQC+CentralAir+X1stFlrSF+X2ndFlrSF+
BsmtFullBath+KitchenQual+TotRmsAbvGrd+Functional+Fireplaces+
GarageCars+ScreenPorch+PoolQC+SaleCondition, data = FinalTrainData)
summary(CustomModel)
CustomModel = lm(SalePrice ~ MSZoning+LotArea+Street+
LotShape+
BldgType+OverallQual+YearBuilt+YearRemodAdd+
RoofMatl+BsmtCond+BsmtFinType1+BsmtFinSF1+
BsmtFinSF2+HeatingQC+CentralAir+X1stFlrSF+X2ndFlrSF+
BsmtFullBath+KitchenQual+TotRmsAbvGrd+Functional+Fireplaces+
GarageCars+ScreenPorch+PoolQC+SaleCondition, data = FinalTrainData)
summary(CustomModel)
Predict_Custom = predict(CustomModel, FinalTestData)
Predict_Custom = exp(Predict_Custom)
Predict_Custom = as.data.frame(Predict_Custom)
CustomPredicted = cbind(FinalTestData$Id,Predict_Custom)
names(CustomPredicted)[1] = "Id"
names(CustomPredicted)[2] = "SalePrice"
summary(CustomPredicted)
Predict_Custom = predict(CustomModel, FinalTestData)
Predict_Custom = exp(Predict_Custom)
Predict_Custom = as.data.frame(Predict_Custom)
CustomPredicted = cbind(FinalTestData$Id,Predict_Custom)
names(CustomPredicted)[1] = "Id"
names(CustomPredicted)[2] = "SalePrice"
summary(CustomPredicted)
# There are 8 NA's, again, which means it is somewhere in our data. This time, the
# mean is different.
CustomPredicted$SalePrice[which(is.na(CustomPredicted$SalePrice))] = 178182
summary(CustomPredicted)
write.csv(CustomPredicted, "SubmissionData/CustomPredicted.csv", row.names =FALSE)
CV(CustomModel)
